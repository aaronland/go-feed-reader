// Code generated by go-bindata.
// sources:
// templates/html/inc_feed_form.html
// templates/html/inc_feeds.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/inc_items.html
// templates/html/inc_pagination.html
// templates/html/inc_search_form.html
// templates/html/inc_search_results.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_feed_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcf\x5d\x8a\x84\x30\x10\x04\xe0\x77\x4f\x51\xf4\x01\xd6\x0b\x24\x81\x65\x0f\xb0\x03\x33\x17\x88\x76\x8b\x01\x93\x88\xd3\x99\x1f\xc4\xbb\x0f\x41\x7d\x9a\xb7\xa2\x0b\xbe\xa2\xcd\x90\x97\x88\x28\x3a\x66\xb6\x74\xf9\xbf\xde\xc8\x35\x80\x09\x69\x2e\x0a\x7d\xcf\x62\x49\xe5\xa5\x84\xe4\xa3\x58\x1a\x44\x98\x10\xf8\x4c\xf3\xe4\x7b\x19\xf3\xc4\xb2\x58\xfa\x65\x86\x47\x92\x27\xf6\xb2\xfd\xa2\xc6\xc0\x2c\xe9\xc4\xfa\xa5\xc4\x6e\xd7\x8e\xf8\xf0\x53\x11\x4b\xeb\x8a\x9f\xbf\x7a\xc1\xb6\x55\x06\xa8\x50\x57\x54\x73\x3a\xa4\x7b\xe9\x62\x50\x72\x75\xb3\xae\x99\x76\xaf\x5d\x63\xda\xfa\x93\x6b\x3e\x01\x00\x00\xff\xff\xf7\xc9\xeb\x2c\xdb\x00\x00\x00")

func templatesHtmlInc_feed_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_feed_formHtml,
		"templates/html/inc_feed_form.html",
	)
}

func templatesHtmlInc_feed_formHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_feed_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_feed_form.html", size: 219, mode: os.FileMode(420), modTime: time.Unix(1523452980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_feedsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xb1\xca\xc3\x30\x0c\x84\xf7\xff\x29\x8e\x90\xf1\x27\xde\x8b\xec\x6e\x9d\x3a\xb6\x0f\x60\xb0\xdc\x8a\x2a\xa6\xc4\xee\x64\xf4\xee\x25\x49\xc9\x26\xdd\x77\x70\x1f\x00\xd0\x47\xc3\xdf\x7a\xf4\x8e\x25\x96\x07\x63\x94\x7f\x8c\x19\x27\x8f\xe9\xc2\x9c\x2a\xcc\xb6\x02\xa9\x04\x8a\x78\x2e\x9c\xfd\xe0\xa4\xf1\x5c\xcf\x99\x39\xf9\xde\x31\xe6\xe9\x2a\xe5\x05\xb3\x21\xec\xef\x4d\x9a\x32\xcc\xc8\xc5\x00\xaa\x73\x54\xfd\x91\xfb\x3b\xc5\xc6\x69\x63\x7b\x4e\x4e\xe5\x90\xe0\x92\x8e\x45\xb7\xca\x7d\x03\x00\x00\xff\xff\xaa\x91\xf2\x8d\xa6\x00\x00\x00")

func templatesHtmlInc_feedsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_feedsHtml,
		"templates/html/inc_feeds.html",
	)
}

func templatesHtmlInc_feedsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_feedsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_feeds.html", size: 166, mode: os.FileMode(420), modTime: time.Unix(1523633543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb2\x49\xc9\x2c\x53\xc8\x4c\xb1\x55\x4a\xcb\xcf\x2f\x49\x2d\x52\xb2\x83\x4a\xd8\xe8\x27\xe5\xa7\x54\x82\xe8\x8c\x92\xdc\x1c\x3b\x2e\x40\x00\x00\x00\xff\xff\x1a\x9b\x11\x3e\x30\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 48, mode: os.FileMode(420), modTime: time.Unix(1523137083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x31\x4f\x03\x31\x0c\x85\xf7\xfb\x15\x26\x3b\x64\x65\xf0\x79\x01\x66\x3a\x74\x61\x34\x8d\x43\x2c\x25\xad\x94\x4b\x2b\xa1\x28\xff\x1d\x85\xdc\x21\x01\x37\x3d\x27\xfe\xfc\xde\xc3\xbb\xe7\xd7\xa7\xe3\xdb\xe1\x05\x42\x49\x91\x26\x1c\x02\x80\x41\xd8\xf5\x01\x00\x93\x14\x86\x53\xe0\xbc\x48\x99\xcd\xb5\xf8\xfb\x47\xb3\xae\x8a\x96\x28\x54\x2b\xa8\x87\x87\x03\x7f\xc8\xb1\x7f\x40\x6b\xb5\xfe\x7b\xcb\xd9\x41\x6b\x68\xc7\x4d\xcf\xb0\x5b\x08\xbe\x5f\xdc\x27\x4d\xc3\xd3\xe9\x0d\xd4\xcd\xa6\x2f\x25\x6f\x49\xd7\x38\x06\x00\x8c\x4a\xc8\x10\xb2\xf8\xd9\x58\x43\xe1\x92\x04\x2d\x13\xda\xa8\xfb\x8c\x17\x71\x8b\xa1\x6f\xf9\x21\x07\xb8\xcb\x2f\xc2\xf9\x14\x0c\x0d\xfd\xed\x8d\x76\x6b\x82\xd6\xe9\xed\x6f\xe9\xc4\x7a\x5e\x2b\x4f\x5f\x01\x00\x00\xff\xff\xf5\x8f\x36\x70\x5d\x01\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 349, mode: os.FileMode(420), modTime: time.Unix(1523287386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_itemsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x31\x4f\xc3\x30\x10\x85\x77\x7e\xc5\x93\xd5\x11\x1a\xa9\x23\x72\xbc\x50\x09\x55\x62\x60\x80\x19\x99\xfa\x9a\x9c\x70\xdc\x28\xbe\x76\x31\xfe\xef\xa8\x26\xa1\x84\x48\x6c\xbe\x7b\xdf\x7d\x7a\x32\x00\xa4\x84\xc1\x86\x86\xb0\xe2\x5b\xac\x58\x70\x5f\x63\xbd\x13\xea\x22\x72\xbe\xb9\x10\xda\xf1\x19\x7b\x6f\x63\xac\x15\x0b\x75\x0a\xec\x6a\xd5\x9c\xd8\xdd\xa5\x74\x39\x59\x3f\xbe\xee\xb6\xc8\x59\x99\xc2\x03\xba\xdd\x18\x6d\xd1\x0e\x74\xa8\xd5\xc8\x3c\x71\xf8\x28\xcc\x38\xbf\xb0\x78\x42\xce\xba\xb2\x06\x3a\x76\xd6\xfb\x29\x7a\x3e\xbd\x7b\x8e\x2d\xb9\x12\x7f\x47\xba\x6a\x37\x3f\x7a\xc7\xe7\xe9\x9d\x12\xf8\x50\xae\xb6\x14\xf7\x03\xf7\xc2\xc7\x30\x35\x2f\xf1\xdf\xec\x13\x51\x06\xee\xdf\xc4\x36\x71\x06\x92\x8f\x34\xc9\x1e\x8e\x41\x28\xc8\x42\x34\xee\xff\x77\xcc\x16\xc1\x5d\x67\x5d\xfd\x6a\xae\x7b\x33\xff\x1a\x5d\xf5\x66\x09\x5e\x1d\x5f\x01\x00\x00\xff\xff\x82\x4e\x85\x8a\xae\x01\x00\x00")

func templatesHtmlInc_itemsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_itemsHtml,
		"templates/html/inc_items.html",
	)
}

func templatesHtmlInc_itemsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_itemsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_items.html", size: 430, mode: os.FileMode(420), modTime: time.Unix(1523324795, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_paginationHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xc1\x4e\x84\x30\x18\x84\xef\x3c\xc5\x58\xbd\xb2\xc4\xab\x29\x7d\x02\x63\x8c\xd1\x07\xa8\xf6\x07\xfe\xa4\xb2\x48\xcb\x66\x13\xd2\x77\x37\x2d\x65\xd9\x35\xab\x27\x2f\x84\x4e\x27\x33\xff\xf7\x77\x9e\xc1\x0d\x5a\x8f\xdd\xb3\x6e\xb9\xd7\x9e\xf7\x7d\xfc\x25\x87\x7b\x84\x50\xc8\xc9\xe2\xc3\x6a\xe7\x6a\x31\x9c\x0c\x02\x6c\x2e\xce\xaa\x28\x00\x79\x53\x96\x68\x78\x74\x1e\x65\x99\x94\x79\xc6\xdd\x30\xd2\x01\x0f\xf5\x65\xfe\x48\x07\xde\x4f\xee\xed\xe5\x11\xbb\xf8\x09\x21\xbb\x7b\x3a\xfa\x9f\xee\x27\x3a\xfa\x33\x27\x90\xa3\xb9\x01\x7d\xe5\x02\x71\x2b\x96\x10\x69\x79\x9d\xd7\xb0\xd3\xef\x96\x8c\x50\x52\xa3\x1b\xa9\xa9\xa3\x6b\x55\xcf\xef\x5f\x3b\x76\x60\x07\xdf\x51\x06\x18\x74\x4b\xb2\xd2\x4a\x56\x96\xd5\x52\x47\xd6\xd1\x52\x9f\x5a\xb6\xd0\x13\x65\x08\x42\xad\x68\x57\x13\x7a\x13\x87\x5c\x57\xf5\xc9\xc6\x58\x4a\xbb\x5a\x42\xa3\x68\x75\x5e\x5f\x92\x36\xca\xb4\x98\xff\xa3\x4c\x35\xbf\x43\x5e\x43\x4c\x13\x44\xc4\xf8\x1e\x7f\xe0\x01\x85\xac\x26\xab\x8a\x4d\xfa\x0e\x00\x00\xff\xff\x46\xac\x24\xd3\x65\x02\x00\x00")

func templatesHtmlInc_paginationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_paginationHtml,
		"templates/html/inc_pagination.html",
	)
}

func templatesHtmlInc_paginationHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_paginationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_pagination.html", size: 613, mode: os.FileMode(420), modTime: time.Unix(1523537961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_search_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x4d\x0a\x83\x30\x14\x84\xf7\x3d\xc5\xf0\x2e\xe0\x05\x12\x77\x3d\x41\x4f\x10\x75\xda\x04\xcc\x8f\xcf\x17\xa8\xb7\x2f\x68\x71\x35\x03\x33\x7c\x7c\x0f\x00\x70\xef\xaa\x79\x3c\x2b\xe0\x52\x69\xdd\x60\x47\xa3\x17\xe3\xd7\x04\x25\x64\x7a\xd9\x04\x69\x39\xa3\xad\x61\x66\xac\xeb\x42\xf5\xf2\x2c\x46\xc5\xd6\xa9\x07\x76\xd3\x54\x3e\x88\x54\x0a\x86\x9b\x38\x75\xb3\x5a\xfe\xc8\xbd\x4f\x39\x99\x8c\x2f\x06\x9d\xa3\x1b\xae\xf1\xfe\x0e\x97\xcb\x2f\x00\x00\xff\xff\x98\x09\x6c\xbe\x98\x00\x00\x00")

func templatesHtmlInc_search_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_search_formHtml,
		"templates/html/inc_search_form.html",
	)
}

func templatesHtmlInc_search_formHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_search_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_search_form.html", size: 152, mode: os.FileMode(420), modTime: time.Unix(1523137083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_search_resultsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\x50\x50\xb0\xc9\x30\xb4\x0b\x2c\x4d\x2d\xaa\x54\x28\x4a\x2d\x2e\xcd\x29\x29\x56\x48\xcb\x2f\x52\xb0\x29\xb4\xab\xae\x56\xd0\x83\x48\xd4\xd6\xda\xe8\x17\xda\xd9\xe8\x67\x18\xda\x71\x01\x02\x00\x00\xff\xff\x57\xc2\x84\x6b\x33\x00\x00\x00")

func templatesHtmlInc_search_resultsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_search_resultsHtml,
		"templates/html/inc_search_results.html",
	)
}

func templatesHtmlInc_search_resultsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_search_resultsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_search_results.html", size: 51, mode: os.FileMode(420), modTime: time.Unix(1523137083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_feed_form.html": templatesHtmlInc_feed_formHtml,
	"templates/html/inc_feeds.html": templatesHtmlInc_feedsHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/inc_items.html": templatesHtmlInc_itemsHtml,
	"templates/html/inc_pagination.html": templatesHtmlInc_paginationHtml,
	"templates/html/inc_search_form.html": templatesHtmlInc_search_formHtml,
	"templates/html/inc_search_results.html": templatesHtmlInc_search_resultsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_feed_form.html": &bintree{templatesHtmlInc_feed_formHtml, map[string]*bintree{}},
			"inc_feeds.html": &bintree{templatesHtmlInc_feedsHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"inc_items.html": &bintree{templatesHtmlInc_itemsHtml, map[string]*bintree{}},
			"inc_pagination.html": &bintree{templatesHtmlInc_paginationHtml, map[string]*bintree{}},
			"inc_search_form.html": &bintree{templatesHtmlInc_search_formHtml, map[string]*bintree{}},
			"inc_search_results.html": &bintree{templatesHtmlInc_search_resultsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


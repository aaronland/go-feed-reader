// Code generated by go-bindata.
// sources:
// templates/html/feeds.html
// templates/html/items.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlFeedsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x3d\xc5\x5f\xcc\x52\x9a\xbd\xc4\x59\x7a\x02\x2f\x50\x99\xd4\x0e\xc4\x0a\x3a\x2e\x24\xe4\xee\x32\x0d\xed\x2e\x81\xf7\xdf\xff\xbc\xb4\xa7\xe6\x01\xe0\x45\xa6\xd2\x0f\x80\x5b\x6d\x2a\xf9\x2a\x52\x3e\x4c\xf1\x74\x82\x76\x84\xef\xaf\xf2\xcb\x43\xc0\x5f\x8d\x94\x19\xde\xd3\xfa\x10\xa4\x7a\x42\x9a\x71\xbe\x60\xdc\x14\x70\x0f\x52\x6b\x36\x43\x9a\xc7\x5b\x57\xc2\x9d\x49\xeb\x11\x96\xb5\x1c\x24\xed\xd2\xad\x36\xda\x98\x62\xea\x3f\x00\x00\xff\xff\x66\xdf\xc8\xcf\xb2\x00\x00\x00")

func templatesHtmlFeedsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlFeedsHtml,
		"templates/html/feeds.html",
	)
}

func templatesHtmlFeedsHtml() (*asset, error) {
	bytes, err := templatesHtmlFeedsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/feeds.html", size: 178, mode: os.FileMode(420), modTime: time.Unix(1523121671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlItemsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6a\xc3\x30\x10\x44\xef\xf9\x8a\xc1\xe4\x18\x22\xc8\xb1\xac\x05\xa5\xa7\x42\x0f\x3d\xf4\x07\x94\x6a\x5b\x89\xca\x72\xb0\x36\x81\x62\xf6\xdf\x8b\x2c\xbb\xd0\xe6\xa6\x5d\xbd\xd9\x61\x86\x82\x0c\xc9\xee\x00\x0a\xec\x7c\x7d\x00\x24\x51\x12\xdb\x67\xe1\xa1\x90\x69\x43\x25\xcc\x86\xd0\x79\xf4\xdf\x76\xb7\xc0\xf3\x8c\xc9\xe5\x4f\xc6\x3e\x1e\xb0\x8f\x82\x87\x1e\xc7\x45\x0a\xd5\x76\xce\xc7\x1b\xde\x93\x2b\xa5\xef\xa2\xf0\xd0\x35\x97\x6a\x79\xb2\xe4\x10\x26\xfe\xe8\xbb\x79\xae\xea\xe3\x4b\xcc\x5f\x50\xed\xec\x3a\xbf\x55\x77\xa8\x92\x71\x16\x54\x06\x97\x92\xfd\x8b\x92\x69\x5b\x32\xe1\xf4\x7b\xf9\xb2\x41\x4f\x63\x16\xce\xb2\x70\x97\xfb\xef\xc7\xab\x84\x71\x82\xea\x01\xeb\xe6\xf5\x7a\x4e\xb1\x04\xf6\xff\x24\xc6\xc7\x9b\xdd\x12\x73\xf6\x5b\xba\xa5\x98\xd6\x07\x99\x56\xe6\x4f\x00\x00\x00\xff\xff\xd2\x91\x01\x99\x54\x01\x00\x00")

func templatesHtmlItemsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlItemsHtml,
		"templates/html/items.html",
	)
}

func templatesHtmlItemsHtml() (*asset, error) {
	bytes, err := templatesHtmlItemsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/items.html", size: 340, mode: os.FileMode(420), modTime: time.Unix(1523122400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/feeds.html": templatesHtmlFeedsHtml,
	"templates/html/items.html": templatesHtmlItemsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"feeds.html": &bintree{templatesHtmlFeedsHtml, map[string]*bintree{}},
			"items.html": &bintree{templatesHtmlItemsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


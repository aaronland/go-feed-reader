// Code generated by go-bindata.
// sources:
// templates/html/#inc_feeds.html#
// templates/html/inc_crumb.html
// templates/html/inc_feed_form.html
// templates/html/inc_feeds.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/inc_index.html
// templates/html/inc_item.html
// templates/html/inc_items.html
// templates/html/inc_pagination.html
// templates/html/inc_search_results.html
// templates/html/inc_signin_form.html
// templates/html/inc_signout_form.html
// templates/html/inc_signup_form.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_feedsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xbd\x8e\x02\x31\x0c\x84\xfb\x7b\x8a\xd1\x6a\x8b\x3b\xe9\xb4\xe9\x51\x36\x74\x54\x14\x14\xf0\x00\x81\x38\xac\x85\x09\x68\x7f\xaa\xc8\xef\x8e\xb2\x41\x88\xce\xfe\x66\x34\x1e\x03\x80\x5d\xc4\xfd\x94\x21\x67\x8c\x3e\x5d\x09\x2d\xff\xa3\x8d\xd8\xf4\xe8\x76\x44\x61\x82\xea\x6a\xb0\xc2\xee\x61\x3d\x86\x91\x62\xdf\x98\x91\x2e\x94\xe6\x6d\x24\x0a\x7d\xce\x68\x63\xb7\xe7\x74\x83\x6a\xe3\xea\x7a\xe4\x59\x08\xaa\xd6\x78\x07\x3b\xdd\xbd\xc8\x5b\x39\x3d\x83\x9f\x29\x40\xb5\x5c\xe5\x58\xd8\x61\x39\x0b\x4f\xc3\x4a\x7f\xab\xed\x1b\xfd\xe5\x0c\x4a\x61\x8d\xab\x51\xd6\x08\x7f\x9a\x57\xa9\xd6\x34\xe5\xa3\x57\x00\x00\x00\xff\xff\x20\x04\xb5\x67\xdb\x00\x00\x00")

func templatesHtmlInc_feedsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_feedsHtml,
		"templates/html/#inc_feeds.html#",
	)
}

func templatesHtmlInc_feedsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_feedsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/#inc_feeds.html#", size: 219, mode: os.FileMode(420), modTime: time.Unix(1525393785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_crumbHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x4d\x8a\xc3\x30\x0c\x85\xf7\x3e\x85\xd0\x01\xc6\xfb\xc1\xd6\x66\x98\x75\x0b\xcd\x05\x92\x5a\x21\x86\xfa\x07\x47\x2e\x14\xe3\xbb\x17\xa7\x85\x76\x27\x9e\xde\xf7\xf8\x5a\x03\xbf\xc2\xcf\x7f\x29\xa9\x40\xef\xca\x64\x3a\xee\x5f\x68\xed\x13\x1b\x9d\x49\xb5\x06\x1c\xdd\x28\x29\xb3\xa6\x12\x20\xb0\x6c\xc9\x59\x3c\x9f\x2e\x13\x92\x02\x30\x3e\xe6\x2a\x20\x8f\xcc\x16\x37\xef\x1c\x47\x84\x38\x07\xb6\x78\x2d\x35\x2c\x08\xf7\xf9\x56\xd9\xe2\xd8\xfe\x1b\x09\xf4\x8e\xa0\x0f\x76\xa9\x22\x29\xbe\xe1\xbd\x2e\xc1\x0b\xd2\xc4\xbb\x18\xfd\x7a\x91\x1a\xb5\x4c\xdf\xf0\x21\x66\xf4\xd0\x21\xf5\x0c\x00\x00\xff\xff\xe0\xf4\x2f\xf8\xcc\x00\x00\x00")

func templatesHtmlInc_crumbHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_crumbHtml,
		"templates/html/inc_crumb.html",
	)
}

func templatesHtmlInc_crumbHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_crumbHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_crumb.html", size: 204, mode: os.FileMode(420), modTime: time.Unix(1525137210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_feed_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcf\x5d\x8a\x84\x30\x10\x04\xe0\x77\x4f\x51\xf4\x01\xd6\x0b\x24\x81\x65\x0f\xb0\x03\x33\x17\x88\x76\x8b\x01\x93\x88\xd3\x99\x1f\xc4\xbb\x0f\x41\x7d\x9a\xb7\xa2\x0b\xbe\xa2\xcd\x90\x97\x88\x28\x3a\x66\xb6\x74\xf9\xbf\xde\xc8\x35\x80\x09\x69\x2e\x0a\x7d\xcf\x62\x49\xe5\xa5\x84\xe4\xa3\x58\x1a\x44\x98\x10\xf8\x4c\xf3\xe4\x7b\x19\xf3\xc4\xb2\x58\xfa\x65\x86\x47\x92\x27\xf6\xb2\xfd\xa2\xc6\xc0\x2c\xe9\xc4\xfa\xa5\xc4\x6e\xd7\x8e\xf8\xf0\x53\x11\x4b\xeb\x8a\x9f\xbf\x7a\xc1\xb6\x55\x06\xa8\x50\x57\x54\x73\x3a\xa4\x7b\xe9\x62\x50\x72\x75\xb3\xae\x99\x76\xaf\x5d\x63\xda\xfa\x93\x6b\x3e\x01\x00\x00\xff\xff\xf7\xc9\xeb\x2c\xdb\x00\x00\x00")

func templatesHtmlInc_feed_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_feed_formHtml,
		"templates/html/inc_feed_form.html",
	)
}

func templatesHtmlInc_feed_formHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_feed_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_feed_form.html", size: 219, mode: os.FileMode(420), modTime: time.Unix(1523452980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_feedsHtml2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xbf\xce\xc2\x30\x0c\xc4\xf7\xef\x29\x4e\x55\x87\x0f\x09\x35\x3b\x4a\xc3\xc6\xc4\xc0\x00\x0f\x10\x88\x43\x2d\x4c\x84\xfa\x67\x8a\xfc\xee\x28\x0d\x42\x6c\xf6\xef\x4e\xe7\x33\x00\xd8\x45\xdc\x5f\x19\x72\xc6\xe8\xd3\x9d\xd0\xf2\x16\x6d\xc4\xae\x47\x77\x20\x0a\x13\x54\x57\x83\x15\x76\xd6\x63\x18\x29\xf6\x8d\x19\xe9\x46\x69\xde\x47\xa2\xd0\xe7\x8c\x36\x76\x47\x4e\x0f\xa8\x36\xae\xae\x67\x9e\x85\xa0\x6a\x8d\x77\xb0\xd3\xd3\x8b\x7c\x94\xcb\x2b\xf8\x99\x02\x54\xcb\x51\x8e\x85\x9d\x96\xab\xf0\x34\xac\xf4\xbf\xda\x7e\xd1\x26\x67\x50\x0a\x6b\x5c\x8d\xb2\x46\xf8\x5b\xbc\x4a\xb5\xa5\x29\x0f\xbd\x03\x00\x00\xff\xff\xd6\xfd\x39\x06\xda\x00\x00\x00")

func templatesHtmlInc_feedsHtml2Bytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_feedsHtml2,
		"templates/html/inc_feeds.html",
	)
}

func templatesHtmlInc_feedsHtml2() (*asset, error) {
	bytes, err := templatesHtmlInc_feedsHtml2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_feeds.html", size: 218, mode: os.FileMode(420), modTime: time.Unix(1525393501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb2\x49\xc9\x2c\x53\xc8\x4c\xb1\x55\x4a\xcb\xcf\x2f\x49\x2d\x52\xb2\x83\x4a\xd8\xe8\x27\xe5\xa7\x54\x82\xe8\x8c\x92\xdc\x1c\x3b\x2e\x40\x00\x00\x00\xff\xff\x1a\x9b\x11\x3e\x30\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 48, mode: os.FileMode(420), modTime: time.Unix(1523137083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x50\xb1\xae\xdb\x30\x0c\x9c\xe3\xaf\x60\xb9\xb7\x5a\x3b\xc8\x5a\xda\xa0\x63\x1f\xd0\x74\xe8\xa8\x58\x74\x24\x40\x96\x12\x89\x0a\x1a\x04\xfe\xf7\x42\x96\xf3\x5e\x11\xb7\x6f\xa2\x44\x1e\xef\x8e\x27\x3f\x7c\xfd\xfe\xe5\xf0\xeb\x65\x0f\x96\x27\xaf\x3a\xd9\x0a\x80\xb4\xa4\x4d\x7d\x00\xc8\x89\x58\xc3\x60\x75\xca\xc4\x3d\x16\x1e\x3f\x7e\xc6\x75\xc4\x8e\x3d\xa9\xfb\x1d\xdc\x08\x9f\x5e\xf4\x89\x0e\xb5\x01\xf3\x7c\xbf\x6f\xfe\x14\x0c\xcc\xb3\x14\x6d\xa7\x6a\x88\x87\x88\x3c\x46\x73\x53\x5d\xe3\x34\xee\x0a\xce\xf4\x58\x87\x94\x70\x6d\x03\xac\x2a\x3f\x33\x25\x98\xe7\xb5\xf9\x8a\xce\xa4\xd3\x60\x51\x75\x3b\x39\xc6\x34\xc1\x44\x6c\xa3\xe9\xf1\xdb\xfe\x80\xa0\x07\x76\x31\xf4\x28\xde\x50\x00\xd2\x85\x73\x61\xe0\xdb\x99\x7a\x64\xfa\xcd\x08\x41\x4f\xd4\xe3\x05\x17\xc6\x0b\xc2\xd9\xeb\x81\x6c\xf4\x86\x52\x8f\xfb\xc0\x94\xe0\x52\x28\xdd\x20\x73\x72\xe1\x04\x96\x12\x21\x88\x46\x77\x2c\xcc\x31\xac\x7c\xb9\x1c\x27\xc7\xa8\x7e\x2c\x82\x52\xb4\x61\x75\x27\xaa\x3d\xf5\xb0\x2f\x8c\xbb\xaa\xb7\x03\x5b\x46\xeb\xff\xf9\xc4\xa0\xaf\xcb\x7d\xc5\x2f\x82\x4f\x79\x54\x0b\xde\x29\xa9\xc1\x26\x1a\x7b\x14\x89\x06\x0a\x8c\xaa\x55\x29\xb4\x92\xc2\x3b\xd5\x48\x77\x00\xdb\x8d\x91\xc8\x64\x54\x4b\x79\xc5\x6f\x61\xda\x18\x54\xda\x18\xa8\xc0\x77\x70\xd9\x9d\x42\x2c\x8c\xaa\x3e\x20\x16\xfe\x1b\x5b\x8f\xf5\x99\x9a\xf3\xed\x9e\x0b\xeb\x9a\x0b\xcf\x5b\x2d\xa2\x9d\x14\xc5\xff\x33\xc6\xee\x3f\x9d\x47\x8c\x93\xae\xe4\x4b\xaf\xfb\x13\x00\x00\xff\xff\x88\x6e\x1b\xc0\x00\x03\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 768, mode: os.FileMode(420), modTime: time.Unix(1525393900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xc1\xa9\xc3\x30\x10\x44\xcf\x76\x15\x83\x0a\xb0\x1a\xd8\xbf\x35\xfc\x4b\x0a\x10\xf2\x38\x11\x08\xd9\x48\x36\x39\x08\xf7\x1e\x64\x11\x02\xc9\x5e\xde\x65\x66\xdf\xd4\x8a\xb0\x60\xba\x15\x66\x9c\xe7\x28\x47\xd4\x71\x00\x24\x06\x15\x87\x47\xe6\xf2\x67\x6c\xa6\x67\xda\x8d\x76\x8a\x75\x2a\x36\x06\xc5\x75\x03\xf0\xdb\x58\xc8\xb9\x18\x6d\x78\xa7\x47\xb1\xed\x79\xad\x60\x2c\xbc\x64\x9b\xfe\x47\xba\x42\x7c\x8a\x25\xdc\x53\x48\x46\x1b\x11\x52\x73\x61\xcd\x5f\x81\x63\x33\xea\x33\xdd\x4e\x38\x24\x3e\xe1\xbc\x5f\x8f\xbe\x6c\x12\xbb\x75\x4b\x9a\x9b\xe4\x15\x00\x00\xff\xff\x4d\x37\xe6\x5e\xe1\x00\x00\x00")

func templatesHtmlInc_indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_indexHtml,
		"templates/html/inc_index.html",
	)
}

func templatesHtmlInc_indexHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_index.html", size: 225, mode: os.FileMode(420), modTime: time.Unix(1524843887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_itemHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x3f\x4f\xc3\x30\x10\xc5\x67\xfa\x29\x4e\x11\x2b\xb5\xd4\x11\x39\xe9\x40\x05\xaa\xc4\xc0\x00\x33\x72\xe3\x6b\x73\x8a\xe3\x84\xf8\x52\x06\xe3\xef\x8e\xf2\x3f\xa1\x12\xde\xee\xde\xdd\x4f\x7e\xf7\xbc\x87\x6f\xe2\x0c\xee\x89\xe1\x31\x86\xed\x91\xb1\x80\x10\x36\xd0\x3e\xa9\xe9\x0a\xa9\x51\xce\xc5\x11\x31\x16\x11\x90\x8e\xa3\x4b\x43\xfa\xc1\xfb\x76\x65\xfb\xf2\x71\x3c\x40\x08\x51\xd2\x2f\x80\xcc\x76\x89\x54\x90\xd5\x78\x8e\xa3\x61\xe6\x95\x6c\xde\xcd\x0c\xf5\x3b\xb1\x41\x08\x41\x0a\x95\x80\x74\x85\x32\x66\x94\xde\x9a\x93\x21\x97\xa1\xee\xe4\x5e\x92\x22\xdb\x4d\x78\x4d\xd7\x64\x73\x27\x4f\xa6\x4c\xf3\xaf\xa6\x64\x1c\x15\xef\x81\xce\x1d\xe3\x80\x2e\xad\xa9\x62\x2a\xed\x64\x04\x06\xfe\x52\xfb\x01\xc7\x35\x55\x9f\xac\x2e\x6e\x35\x88\xc6\xe1\x08\x7b\x2a\x2d\xa3\xe5\x1b\xd0\xd0\xff\x9f\xb1\x6a\x58\x3d\xd7\x52\xdc\x1a\x90\xa2\xf3\x36\x14\x55\xb2\x3e\x1e\x4c\x47\x15\x6d\x10\xfb\x36\x83\xf8\x6f\x06\x15\xd6\x85\x32\x64\xf3\xf6\xb2\x52\x54\x0b\xda\xbc\x5e\x63\x8a\x96\xf7\x67\xc4\x1e\xb0\x7d\x46\xd4\xeb\x8c\xfa\xd6\x32\xa6\x25\xac\xff\xe7\x6c\xe9\x37\x00\x00\xff\xff\xfe\xb1\x56\x28\x42\x02\x00\x00")

func templatesHtmlInc_itemHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_itemHtml,
		"templates/html/inc_item.html",
	)
}

func templatesHtmlInc_itemHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_itemHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_item.html", size: 578, mode: os.FileMode(420), modTime: time.Unix(1525393792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_itemsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xb1\x4e\xc3\x30\x10\x86\x67\xfa\x14\xbf\xa2\x8e\x50\x4b\x1d\x91\x13\x06\x2a\xa1\x4a\x0c\x0c\x30\x23\xb7\xbe\x36\xa7\x38\x4e\x88\x9d\x2e\xc6\xef\x8e\x62\x92\x56\x69\x11\xe3\xdd\xf7\xfb\x93\xef\x0e\x00\x42\x40\xa7\xec\x91\xb0\xe4\x7b\x2c\xd9\xe3\x31\xc7\x6a\xeb\xa9\x76\x88\x71\x31\x24\xa4\xe6\x13\xf6\x46\x39\x97\x67\xec\xa9\xce\xc0\x3a\xcf\x8e\x3d\xeb\x87\x10\x86\x27\xab\x97\x8f\xed\x06\x31\x66\x45\xca\x03\xb2\x5c\x17\x52\xa1\xec\xe8\x90\x67\x63\xe6\x95\x6d\x95\x32\x63\xfd\xce\xde\x10\x62\x94\x42\x15\x90\xae\x56\xc6\x4c\xe8\xad\xdf\x19\x76\x25\xe9\x84\x7f\x91\x14\xe5\xfa\xac\xd7\x7c\x2a\x16\x77\x72\x67\x9a\x7d\xf5\xd5\x37\x9e\x26\x12\x02\xf8\x90\x1c\x1b\x72\xfb\x8e\x5b\xcf\x8d\x9d\xe6\x48\xf8\x9a\x7d\xc3\xf9\x8e\xdb\x4f\xaf\x8e\x6e\x16\x24\xe3\x68\x92\x3d\x37\xd6\x93\xf5\x37\xa2\xb1\xff\xbf\x63\xd6\xb0\xfa\x52\x4b\x71\x3b\x80\x14\x69\xb6\xb1\x68\x8b\xf9\xf2\x70\x5e\xaa\x18\x0e\xf1\x34\xdc\x20\xbf\xbe\x41\x4b\x5d\xad\x0c\xdb\x6a\xd8\xac\x14\xed\x1f\xea\xcb\x4f\x7e\x02\x00\x00\xff\xff\xa6\x58\x01\x56\x02\x02\x00\x00")

func templatesHtmlInc_itemsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_itemsHtml,
		"templates/html/inc_items.html",
	)
}

func templatesHtmlInc_itemsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_itemsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_items.html", size: 514, mode: os.FileMode(420), modTime: time.Unix(1523926080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_paginationHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xc1\x4e\x84\x30\x18\x84\xef\x3c\xc5\x58\xbd\xb2\xc4\xab\x29\x7d\x02\x63\x8c\xd1\x07\xa8\xf6\x07\xfe\xa4\xb2\x48\xcb\x66\x13\xd2\x77\x37\x2d\x65\xd9\x35\xab\x27\x2f\x84\x4e\x27\x33\xff\xf7\x77\x9e\xc1\x0d\x5a\x8f\xdd\xb3\x6e\xb9\xd7\x9e\xf7\x7d\xfc\x25\x87\x7b\x84\x50\xc8\xc9\xe2\xc3\x6a\xe7\x6a\x31\x9c\x0c\x02\x6c\x2e\xce\xaa\x28\x00\x79\x53\x96\x68\x78\x74\x1e\x65\x99\x94\x79\xc6\xdd\x30\xd2\x01\x0f\xf5\x65\xfe\x48\x07\xde\x4f\xee\xed\xe5\x11\xbb\xf8\x09\x21\xbb\x7b\x3a\xfa\x9f\xee\x27\x3a\xfa\x33\x27\x90\xa3\xb9\x01\x7d\xe5\x02\x71\x2b\x96\x10\x69\x79\x9d\xd7\xb0\xd3\xef\x96\x8c\x50\x52\xa3\x1b\xa9\xa9\xa3\x6b\x55\xcf\xef\x5f\x3b\x76\x60\x07\xdf\x51\x06\x18\x74\x4b\xb2\xd2\x4a\x56\x96\xd5\x52\x47\xd6\xd1\x52\x9f\x5a\xb6\xd0\x13\x65\x08\x42\xad\x68\x57\x13\x7a\x13\x87\x5c\x57\xf5\xc9\xc6\x58\x4a\xbb\x5a\x42\xa3\x68\x75\x5e\x5f\x92\x36\xca\xb4\x98\xff\xa3\x4c\x35\xbf\x43\x5e\x43\x4c\x13\x44\xc4\xf8\x1e\x7f\xe0\x01\x85\xac\x26\xab\x8a\x4d\xfa\x0e\x00\x00\xff\xff\x46\xac\x24\xd3\x65\x02\x00\x00")

func templatesHtmlInc_paginationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_paginationHtml,
		"templates/html/inc_pagination.html",
	)
}

func templatesHtmlInc_paginationHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_paginationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_pagination.html", size: 613, mode: os.FileMode(420), modTime: time.Unix(1523537961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_search_resultsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\x50\x50\xb0\xc9\x30\xb4\x0b\x2c\x4d\x2d\xaa\x54\x28\x4a\x2d\x2e\xcd\x29\x29\x56\x48\xcb\x2f\x52\xb0\x29\xb4\xab\xae\x56\xd0\x83\x48\xd4\xd6\xda\xe8\x17\xda\xd9\xe8\x67\x18\xda\x71\x01\x02\x00\x00\xff\xff\x57\xc2\x84\x6b\x33\x00\x00\x00")

func templatesHtmlInc_search_resultsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_search_resultsHtml,
		"templates/html/inc_search_results.html",
	)
}

func templatesHtmlInc_search_resultsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_search_resultsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_search_results.html", size: 51, mode: os.FileMode(420), modTime: time.Unix(1523137083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_signin_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4b\x4e\xc3\x30\x10\x86\xf7\x39\xc5\x68\xf6\xe0\x0b\xd8\xde\x70\x00\x90\xca\x05\x26\xf5\xa4\x19\xc9\x76\x22\x3f\x02\xa8\xea\xdd\x51\x9c\xa4\x5d\x50\x56\x9e\xe7\xff\x59\xff\x68\x27\x0b\x88\x33\x98\xe5\x12\x25\xa2\xed\x00\xf4\x30\xa5\x00\x81\xcb\x38\x39\x83\x1f\xef\xa7\xcf\x56\x06\xd0\x12\xe7\x5a\xa0\xfc\xcc\x6c\x70\x14\xe7\x38\x22\x44\x0a\x6c\xf0\x9c\x6a\xe8\x11\x16\xf2\x95\x0d\x5e\xaf\xf0\xfa\xb6\x56\xe0\x76\x43\x50\xb6\xdb\xd6\x3d\xf5\xec\x61\x98\x92\x41\x0e\x24\x1e\x6d\x7b\x80\x9c\x4b\x9c\xb3\x56\x6d\xe0\x09\xab\xf0\x77\x39\x48\xdb\x66\xfb\xf3\x1e\xee\xd0\xe7\xa0\x99\x72\xfe\x9a\x92\x43\x7b\x44\xff\x63\xee\xb3\x3b\xea\x91\xaf\xb4\x47\xf6\x17\xd8\xd7\x52\xa6\xb8\xcb\xe4\xda\x07\x29\x68\x4f\x72\x89\x20\x51\xab\xad\xdb\xac\x55\xab\xb7\xb6\xd3\xca\xc9\x62\xbb\xae\xd9\x7f\xf6\x94\xf3\x71\x81\x17\xf2\x65\xbb\x02\xc1\x98\x78\x30\xa8\xd6\x46\x9d\x77\xbd\x3a\x6b\x45\x77\x81\xdf\x00\x00\x00\xff\xff\x6f\x1c\x21\x14\xbf\x01\x00\x00")

func templatesHtmlInc_signin_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_signin_formHtml,
		"templates/html/inc_signin_form.html",
	)
}

func templatesHtmlInc_signin_formHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_signin_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_signin_form.html", size: 447, mode: os.FileMode(420), modTime: time.Unix(1524274335, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_signout_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xce\x4b\xaa\x84\x30\x10\x85\xe1\x79\x56\x51\xd4\xfc\xde\x6c\x20\xc9\xc4\x05\x74\x83\xbd\x81\x68\xa2\x16\xe4\x21\xa6\x22\x34\xe2\xde\x1b\x1f\x38\x3d\x87\x1f\x3e\xe5\x68\x05\x72\x1a\x0b\x8d\x29\x57\x46\x23\x00\xd4\x90\x97\x08\xd1\xf3\x94\x9d\xc6\xf7\xab\xfd\x9c\x33\x80\xa2\x34\x57\x06\xfe\xce\x5e\xe3\x44\xce\xf9\x84\x90\x6c\xf4\x1a\xfb\xa5\xc6\x0e\x61\xb5\xa1\x7a\x8d\xdb\x06\xff\xcd\xb1\xc0\xbe\x23\x48\x23\xae\xbc\xab\xcc\x39\xdd\x7d\xa9\x5d\x24\x46\xd3\xd2\x98\x20\x57\x56\xf2\xba\x4f\x81\x3c\x08\x46\x28\xe9\x68\x35\x42\x9c\xcc\x3e\xd8\x52\x1e\xe9\x9f\x0d\xb7\xd6\xc2\xb4\xf8\x41\xa3\x44\xd3\xd8\xd4\xfb\xa0\xa4\x7d\xd2\x5f\x00\x00\x00\xff\xff\x61\x04\xfa\xed\xe1\x00\x00\x00")

func templatesHtmlInc_signout_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_signout_formHtml,
		"templates/html/inc_signout_form.html",
	)
}

func templatesHtmlInc_signout_formHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_signout_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_signout_form.html", size: 225, mode: os.FileMode(420), modTime: time.Unix(1524584777, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_signup_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4d\x6a\xc3\x30\x10\x85\xf7\x3e\xc5\x30\xfb\x56\x17\x90\xb4\xe9\x01\x5a\x48\x2f\x20\x47\x93\x78\x40\x92\x8d\x7e\xdc\x96\x90\xbb\x17\xc9\x76\x1c\x48\x03\x5d\x69\xfe\xde\xfb\x04\x4f\x5a\x9e\x81\xad\xc2\xc4\xe7\x50\x26\xd4\x1d\x80\x3c\x8d\xd1\x83\xa7\x3c\x8c\x56\xe1\xc7\xfb\xe1\xb3\x8d\x01\x24\x87\xa9\x64\xc8\x3f\x13\x29\x1c\xd8\x5a\x0a\x08\xc1\x78\x52\x78\x8c\xc5\xf7\x08\xb3\x71\x85\x14\x5e\x2e\xf0\xfa\x56\x27\x70\xbd\x22\x08\xdd\x2d\x72\x67\x7a\x72\x70\x1a\xa3\x42\xf2\x86\x1d\xea\x92\x28\x56\x03\x29\xda\xee\x0f\x4c\xa6\xef\xbc\x41\xb6\x6b\x6c\x3f\xde\xbb\x95\xda\x48\xd5\xe0\x19\xad\x3d\x60\xac\x8d\x94\xd2\xff\x90\x8b\xb2\xf1\xd6\xf2\x1e\xf6\x00\x9a\x4c\x4a\x5f\x63\xb4\xa8\xb7\xea\x39\xe6\x76\xbb\xa2\xf6\xbe\xd2\xf6\xee\x11\xd8\x97\x9c\xc7\xb0\xda\xa4\xd2\x7b\xce\xa8\x0f\x7c\x0e\xc0\x41\x8a\x65\xdb\x82\x14\x35\x49\xdd\x49\x61\x79\xd6\x5d\xd7\xc2\x3e\x3a\x93\xd2\x96\xf7\x8b\x71\x79\xc9\xdc\xc0\x10\xe9\xa4\x50\xd4\x45\xb8\xb3\x33\x37\xfd\x6f\x00\x00\x00\xff\xff\x35\x24\x64\xc9\x2c\x02\x00\x00")

func templatesHtmlInc_signup_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_signup_formHtml,
		"templates/html/inc_signup_form.html",
	)
}

func templatesHtmlInc_signup_formHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_signup_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_signup_form.html", size: 556, mode: os.FileMode(420), modTime: time.Unix(1524274380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/#inc_feeds.html#": templatesHtmlInc_feedsHtml,
	"templates/html/inc_crumb.html": templatesHtmlInc_crumbHtml,
	"templates/html/inc_feed_form.html": templatesHtmlInc_feed_formHtml,
	"templates/html/inc_feeds.html": templatesHtmlInc_feedsHtml2,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/inc_index.html": templatesHtmlInc_indexHtml,
	"templates/html/inc_item.html": templatesHtmlInc_itemHtml,
	"templates/html/inc_items.html": templatesHtmlInc_itemsHtml,
	"templates/html/inc_pagination.html": templatesHtmlInc_paginationHtml,
	"templates/html/inc_search_results.html": templatesHtmlInc_search_resultsHtml,
	"templates/html/inc_signin_form.html": templatesHtmlInc_signin_formHtml,
	"templates/html/inc_signout_form.html": templatesHtmlInc_signout_formHtml,
	"templates/html/inc_signup_form.html": templatesHtmlInc_signup_formHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"#inc_feeds.html#": &bintree{templatesHtmlInc_feedsHtml, map[string]*bintree{}},
			"inc_crumb.html": &bintree{templatesHtmlInc_crumbHtml, map[string]*bintree{}},
			"inc_feed_form.html": &bintree{templatesHtmlInc_feed_formHtml, map[string]*bintree{}},
			"inc_feeds.html": &bintree{templatesHtmlInc_feedsHtml2, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"inc_index.html": &bintree{templatesHtmlInc_indexHtml, map[string]*bintree{}},
			"inc_item.html": &bintree{templatesHtmlInc_itemHtml, map[string]*bintree{}},
			"inc_items.html": &bintree{templatesHtmlInc_itemsHtml, map[string]*bintree{}},
			"inc_pagination.html": &bintree{templatesHtmlInc_paginationHtml, map[string]*bintree{}},
			"inc_search_results.html": &bintree{templatesHtmlInc_search_resultsHtml, map[string]*bintree{}},
			"inc_signin_form.html": &bintree{templatesHtmlInc_signin_formHtml, map[string]*bintree{}},
			"inc_signout_form.html": &bintree{templatesHtmlInc_signout_formHtml, map[string]*bintree{}},
			"inc_signup_form.html": &bintree{templatesHtmlInc_signup_formHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


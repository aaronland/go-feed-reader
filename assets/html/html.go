// Code generated by go-bindata.
// sources:
// templates/html/inc_feed_form.html
// templates/html/inc_feeds.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/inc_item.html
// templates/html/inc_items.html
// templates/html/inc_pagination.html
// templates/html/inc_search_results.html
// templates/html/inc_signin.html
// templates/html/inc_signup.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_feed_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcf\x5d\x8a\x84\x30\x10\x04\xe0\x77\x4f\x51\xf4\x01\xd6\x0b\x24\x81\x65\x0f\xb0\x03\x33\x17\x88\x76\x8b\x01\x93\x88\xd3\x99\x1f\xc4\xbb\x0f\x41\x7d\x9a\xb7\xa2\x0b\xbe\xa2\xcd\x90\x97\x88\x28\x3a\x66\xb6\x74\xf9\xbf\xde\xc8\x35\x80\x09\x69\x2e\x0a\x7d\xcf\x62\x49\xe5\xa5\x84\xe4\xa3\x58\x1a\x44\x98\x10\xf8\x4c\xf3\xe4\x7b\x19\xf3\xc4\xb2\x58\xfa\x65\x86\x47\x92\x27\xf6\xb2\xfd\xa2\xc6\xc0\x2c\xe9\xc4\xfa\xa5\xc4\x6e\xd7\x8e\xf8\xf0\x53\x11\x4b\xeb\x8a\x9f\xbf\x7a\xc1\xb6\x55\x06\xa8\x50\x57\x54\x73\x3a\xa4\x7b\xe9\x62\x50\x72\x75\xb3\xae\x99\x76\xaf\x5d\x63\xda\xfa\x93\x6b\x3e\x01\x00\x00\xff\xff\xf7\xc9\xeb\x2c\xdb\x00\x00\x00")

func templatesHtmlInc_feed_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_feed_formHtml,
		"templates/html/inc_feed_form.html",
	)
}

func templatesHtmlInc_feed_formHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_feed_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_feed_form.html", size: 219, mode: os.FileMode(420), modTime: time.Unix(1523452980, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_feedsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xbf\xce\xc2\x30\x0c\xc4\xf7\xef\x29\x4e\x55\x87\x0f\x09\x35\x3b\x4a\xc3\xc6\xc4\xc0\x00\x0f\x10\x88\x43\x2d\x4c\x84\xfa\x67\x8a\xfc\xee\x28\x0d\x42\x6c\xf6\xef\x4e\xe7\x33\x00\xd8\x45\xdc\x5f\x19\x72\xc6\xe8\xd3\x9d\xd0\xf2\x16\x6d\xc4\xae\x47\x77\x20\x0a\x13\x54\x57\x83\x15\x76\xd6\x63\x18\x29\xf6\x8d\x19\xe9\x46\x69\xde\x47\xa2\xd0\xe7\x8c\x36\x76\x47\x4e\x0f\xa8\x36\xae\xae\x67\x9e\x85\xa0\x6a\x8d\x77\xb0\xd3\xd3\x8b\x7c\x94\xcb\x2b\xf8\x99\x02\x54\xcb\x51\x8e\x85\x9d\x96\xab\xf0\x34\xac\xf4\xbf\xda\x7e\xd1\x26\x67\x50\x0a\x6b\x5c\x8d\xb2\x46\xf8\x5b\xbc\x4a\xb5\xa5\x29\x0f\xbd\x03\x00\x00\xff\xff\xd6\xfd\x39\x06\xda\x00\x00\x00")

func templatesHtmlInc_feedsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_feedsHtml,
		"templates/html/inc_feeds.html",
	)
}

func templatesHtmlInc_feedsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_feedsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_feeds.html", size: 218, mode: os.FileMode(420), modTime: time.Unix(1523669165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xd1\x4f\xc9\x2c\xb3\xe3\xe2\xb2\x49\xc9\x2c\x53\xc8\x4c\xb1\x55\x4a\xcb\xcf\x2f\x49\x2d\x52\xb2\x83\x4a\xd8\xe8\x27\xe5\xa7\x54\x82\xe8\x8c\x92\xdc\x1c\x3b\x2e\x40\x00\x00\x00\xff\xff\x1a\x9b\x11\x3e\x30\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 48, mode: os.FileMode(420), modTime: time.Unix(1523137083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xc1\x6e\xeb\x20\x10\x3c\x3f\x7f\xc5\xbe\xbd\xb7\x5c\x7b\x00\x2e\x6d\xd4\x63\x23\x35\x97\x1e\x89\x59\x07\x24\xc0\x09\x5e\xa2\x46\x96\xff\xbd\x72\x70\xda\xaa\x6e\x4f\x0b\x33\xc3\xcc\xac\x84\xfc\xff\xf4\xf2\xb8\x7b\xdb\x6e\xc0\x71\x0c\xba\x91\x75\x00\x48\x47\xc6\xce\x07\x00\x19\x89\x0d\xb4\xce\xe4\x81\x58\x61\xe1\xee\xee\x01\x17\x8a\x3d\x07\xd2\xe3\x08\xbe\x83\xfb\xad\x39\xd0\x6e\x06\x60\x9a\xc6\x71\x75\xa7\x64\x61\x9a\xa4\xa8\x6f\xe6\x0c\x71\x0b\x91\xfb\xde\x5e\x74\x53\x3d\xad\x3f\x83\xb7\x0a\x67\x92\x32\x2e\xf0\x37\x62\x20\x93\x5b\x87\xba\xf9\x27\xbb\x3e\x47\x88\xc4\xae\xb7\x0a\x9f\x37\x3b\x04\xd3\xb2\xef\x93\x42\xf1\xa5\x02\x90\x3e\x1d\x0b\x03\x5f\x8e\xa4\x90\xe9\x9d\x11\x92\x89\xa4\xf0\x84\x57\xc7\x13\xc2\x31\x98\x96\x5c\x1f\x2c\x65\x85\x9b\xc4\x94\xe1\x54\x28\x5f\x60\xe0\xec\xd3\x01\x1c\x65\x42\x10\xd5\x6e\x5f\x98\xfb\xb4\xf8\x0d\x65\x1f\x3d\xa3\x7e\xbd\x06\x4a\x51\xc9\xb9\x9d\x98\xeb\xe9\x5b\x7d\x61\xfd\x79\xbd\x4c\x32\xe7\xeb\x26\x25\x54\xeb\xe0\xb5\x34\xe0\x32\x75\x0a\x05\x6a\xd7\x47\x92\xc2\x68\x29\x82\xff\x45\x90\xa9\xa5\xc4\xa8\xeb\xfc\x14\xd6\x8c\xb5\xdc\x58\x8b\xda\x58\xbb\x12\x4a\x51\xc2\x8f\xa2\x0b\xf5\x07\x72\xab\x1f\x8d\x4f\xcb\x67\x68\x3e\x02\x00\x00\xff\xff\xa1\xb9\x0f\xe9\x4d\x02\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 589, mode: os.FileMode(420), modTime: time.Unix(1523669318, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_itemHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x4f\xc3\x30\x0c\x85\xcf\xec\x57\x58\x15\x57\x16\x69\x47\xe4\x96\x03\x93\xd0\x24\x0e\x1c\xe0\x8c\xb2\xc6\x5b\xad\xa6\x69\x69\xdc\x71\x08\xf9\xef\xa8\x5d\xdb\xd1\x4d\x22\x37\xfb\xd9\x9f\xe2\xf7\x42\x80\x6f\x96\x02\xee\x59\xe0\x31\x85\xf5\x4e\xa8\x82\x18\x57\xd0\x3f\x34\x7c\x82\xdc\x6a\xef\xd3\x84\x85\xaa\x04\xd8\xa4\xc9\xb1\x63\xf3\x10\x42\xbf\xb2\x7e\xf9\xd8\x6d\x21\xc6\x24\x3b\x2f\x00\x16\x9b\x0c\x35\x14\x2d\x1d\xd2\x64\x9c\x79\x65\x57\x0e\x33\x63\xfd\xce\x62\x09\x62\x44\xa5\x33\x40\x5f\x69\x6b\x27\xe9\xad\xdb\x5b\xf6\x05\x99\x41\x3e\x4b\xa8\x8a\xcd\x8c\x37\x7c\xca\x56\x77\xb8\xb7\x75\x5e\x7e\x75\xb5\xd0\xa4\x84\x00\x7c\x18\x18\x5b\xf2\x79\xcb\x8d\x70\xed\xe6\x43\x60\xe4\xff\xd5\x7e\xc0\x4b\xcb\xcd\xa7\xe8\xa3\x5f\x0c\x92\xf5\x34\xc1\x9e\x6b\x27\xe4\xe4\x06\x34\xf6\xff\x67\x2c\x1a\xce\x5c\x6a\x54\xb7\x07\xa0\x1a\x6e\x1b\x8b\x26\x5b\x9a\x07\xb3\xa9\xaa\x0f\xe2\xa9\xcf\x20\xbd\xce\xa0\xa1\xb6\xd2\x96\x5d\xd9\x3b\x8b\xaa\xb9\x42\x5f\x7e\xf1\x1b\x00\x00\xff\xff\xf7\xdd\x19\xaa\xf5\x01\x00\x00")

func templatesHtmlInc_itemHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_itemHtml,
		"templates/html/inc_item.html",
	)
}

func templatesHtmlInc_itemHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_itemHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_item.html", size: 501, mode: os.FileMode(420), modTime: time.Unix(1523926168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_itemsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xb1\x4e\xc3\x30\x10\x86\x67\xfa\x14\xbf\xa2\x8e\x50\x4b\x1d\x91\x13\x06\x2a\xa1\x4a\x0c\x0c\x30\x23\xb7\xbe\x36\xa7\x38\x4e\x88\x9d\x2e\xc6\xef\x8e\x62\x92\x56\x69\x11\xe3\xdd\xf7\xfb\x93\xef\x0e\x00\x42\x40\xa7\xec\x91\xb0\xe4\x7b\x2c\xd9\xe3\x31\xc7\x6a\xeb\xa9\x76\x88\x71\x31\x24\xa4\xe6\x13\xf6\x46\x39\x97\x67\xec\xa9\xce\xc0\x3a\xcf\x8e\x3d\xeb\x87\x10\x86\x27\xab\x97\x8f\xed\x06\x31\x66\x45\xca\x03\xb2\x5c\x17\x52\xa1\xec\xe8\x90\x67\x63\xe6\x95\x6d\x95\x32\x63\xfd\xce\xde\x10\x62\x94\x42\x15\x90\xae\x56\xc6\x4c\xe8\xad\xdf\x19\x76\x25\xe9\x84\x7f\x91\x14\xe5\xfa\xac\xd7\x7c\x2a\x16\x77\x72\x67\x9a\x7d\xf5\xd5\x37\x9e\x26\x12\x02\xf8\x90\x1c\x1b\x72\xfb\x8e\x5b\xcf\x8d\x9d\xe6\x48\xf8\x9a\x7d\xc3\xf9\x8e\xdb\x4f\xaf\x8e\x6e\x16\x24\xe3\x68\x92\x3d\x37\xd6\x93\xf5\x37\xa2\xb1\xff\xbf\x63\xd6\xb0\xfa\x52\x4b\x71\x3b\x80\x14\x69\xb6\xb1\x68\x8b\xf9\xf2\x70\x5e\xaa\x18\x0e\xf1\x34\xdc\x20\xbf\xbe\x41\x4b\x5d\xad\x0c\xdb\x6a\xd8\xac\x14\xed\x1f\xea\xcb\x4f\x7e\x02\x00\x00\xff\xff\xa6\x58\x01\x56\x02\x02\x00\x00")

func templatesHtmlInc_itemsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_itemsHtml,
		"templates/html/inc_items.html",
	)
}

func templatesHtmlInc_itemsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_itemsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_items.html", size: 514, mode: os.FileMode(420), modTime: time.Unix(1523926080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_paginationHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xc1\x4e\x84\x30\x18\x84\xef\x3c\xc5\x58\xbd\xb2\xc4\xab\x29\x7d\x02\x63\x8c\xd1\x07\xa8\xf6\x07\xfe\xa4\xb2\x48\xcb\x66\x13\xd2\x77\x37\x2d\x65\xd9\x35\xab\x27\x2f\x84\x4e\x27\x33\xff\xf7\x77\x9e\xc1\x0d\x5a\x8f\xdd\xb3\x6e\xb9\xd7\x9e\xf7\x7d\xfc\x25\x87\x7b\x84\x50\xc8\xc9\xe2\xc3\x6a\xe7\x6a\x31\x9c\x0c\x02\x6c\x2e\xce\xaa\x28\x00\x79\x53\x96\x68\x78\x74\x1e\x65\x99\x94\x79\xc6\xdd\x30\xd2\x01\x0f\xf5\x65\xfe\x48\x07\xde\x4f\xee\xed\xe5\x11\xbb\xf8\x09\x21\xbb\x7b\x3a\xfa\x9f\xee\x27\x3a\xfa\x33\x27\x90\xa3\xb9\x01\x7d\xe5\x02\x71\x2b\x96\x10\x69\x79\x9d\xd7\xb0\xd3\xef\x96\x8c\x50\x52\xa3\x1b\xa9\xa9\xa3\x6b\x55\xcf\xef\x5f\x3b\x76\x60\x07\xdf\x51\x06\x18\x74\x4b\xb2\xd2\x4a\x56\x96\xd5\x52\x47\xd6\xd1\x52\x9f\x5a\xb6\xd0\x13\x65\x08\x42\xad\x68\x57\x13\x7a\x13\x87\x5c\x57\xf5\xc9\xc6\x58\x4a\xbb\x5a\x42\xa3\x68\x75\x5e\x5f\x92\x36\xca\xb4\x98\xff\xa3\x4c\x35\xbf\x43\x5e\x43\x4c\x13\x44\xc4\xf8\x1e\x7f\xe0\x01\x85\xac\x26\xab\x8a\x4d\xfa\x0e\x00\x00\xff\xff\x46\xac\x24\xd3\x65\x02\x00\x00")

func templatesHtmlInc_paginationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_paginationHtml,
		"templates/html/inc_pagination.html",
	)
}

func templatesHtmlInc_paginationHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_paginationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_pagination.html", size: 613, mode: os.FileMode(420), modTime: time.Unix(1523537961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_search_resultsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\x50\x50\xb0\xc9\x30\xb4\x0b\x2c\x4d\x2d\xaa\x54\x28\x4a\x2d\x2e\xcd\x29\x29\x56\x48\xcb\x2f\x52\xb0\x29\xb4\xab\xae\x56\xd0\x83\x48\xd4\xd6\xda\xe8\x17\xda\xd9\xe8\x67\x18\xda\x71\x01\x02\x00\x00\xff\xff\x57\xc2\x84\x6b\x33\x00\x00\x00")

func templatesHtmlInc_search_resultsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_search_resultsHtml,
		"templates/html/inc_search_results.html",
	)
}

func templatesHtmlInc_search_resultsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_search_resultsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_search_results.html", size: 51, mode: os.FileMode(420), modTime: time.Unix(1523137083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_signinHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x91\x4b\x4e\xc3\x30\x10\x86\xf7\x39\xc5\x68\xf6\xe0\x0b\xd8\xde\x70\x00\x90\xca\x05\x26\xf5\xa4\x19\xc9\x76\x22\x3f\x02\xa8\xea\xdd\x51\x9c\xa4\x5d\x50\x56\x9e\xe7\xff\x59\xff\x68\x27\x0b\x88\x33\x98\xe5\x12\x25\xa2\xed\x00\xf4\x30\xa5\x00\x81\xcb\x38\x39\x83\x1f\xef\xa7\xcf\x56\x06\xd0\x12\xe7\x5a\xa0\xfc\xcc\x6c\x70\x14\xe7\x38\x22\x44\x0a\x6c\xf0\x9c\x6a\xe8\x11\x16\xf2\x95\x0d\x5e\xaf\xf0\xfa\xb6\x56\xe0\x76\x43\x50\xb6\xdb\xd6\x3d\xf5\xec\x61\x98\x92\x41\x0e\x24\x1e\x6d\x7b\x80\x9c\x4b\x9c\xb3\x56\x6d\xe0\x09\xab\xf0\x77\x39\x48\xdb\x66\xfb\xf3\x1e\xee\xd0\xe7\xa0\x99\x72\xfe\x9a\x92\x43\x7b\x44\xff\x63\xee\xb3\x3b\xea\x91\xaf\xb4\x47\xf6\x17\xd8\xd7\x52\xa6\xb8\xcb\xe4\xda\x07\x29\x68\x4f\x72\x89\x20\x51\xab\xad\xdb\xac\x55\xab\xb7\xb6\xd3\xca\xc9\x62\xbb\xae\xd9\x7f\xf6\x94\xf3\x71\x81\x17\xf2\x65\xbb\x02\xc1\x98\x78\x30\xa8\xd6\x46\x9d\x77\xbd\x3a\x6b\x45\x77\x81\xdf\x00\x00\x00\xff\xff\x6f\x1c\x21\x14\xbf\x01\x00\x00")

func templatesHtmlInc_signinHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_signinHtml,
		"templates/html/inc_signin.html",
	)
}

func templatesHtmlInc_signinHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_signinHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_signin.html", size: 447, mode: os.FileMode(420), modTime: time.Unix(1524274335, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_signupHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x4d\x6a\xc3\x30\x10\x85\xf7\x3e\xc5\x30\xfb\x56\x17\x90\xb4\xe9\x01\x5a\x48\x2f\x20\x47\x93\x78\x40\x92\x8d\x7e\xdc\x96\x90\xbb\x17\xc9\x76\x1c\x48\x03\x5d\x69\xfe\xde\xfb\x04\x4f\x5a\x9e\x81\xad\xc2\xc4\xe7\x50\x26\xd4\x1d\x80\x3c\x8d\xd1\x83\xa7\x3c\x8c\x56\xe1\xc7\xfb\xe1\xb3\x8d\x01\x24\x87\xa9\x64\xc8\x3f\x13\x29\x1c\xd8\x5a\x0a\x08\xc1\x78\x52\x78\x8c\xc5\xf7\x08\xb3\x71\x85\x14\x5e\x2e\xf0\xfa\x56\x27\x70\xbd\x22\x08\xdd\x2d\x72\x67\x7a\x72\x70\x1a\xa3\x42\xf2\x86\x1d\xea\x92\x28\x56\x03\x29\xda\xee\x0f\x4c\xa6\xef\xbc\x41\xb6\x6b\x6c\x3f\xde\xbb\x95\xda\x48\xd5\xe0\x19\xad\x3d\x60\xac\x8d\x94\xd2\xff\x90\x8b\xb2\xf1\xd6\xf2\x1e\xf6\x00\x9a\x4c\x4a\x5f\x63\xb4\xa8\xb7\xea\x39\xe6\x76\xbb\xa2\xf6\xbe\xd2\xf6\xee\x11\xd8\x97\x9c\xc7\xb0\xda\xa4\xd2\x7b\xce\xa8\x0f\x7c\x0e\xc0\x41\x8a\x65\xdb\x82\x14\x35\x49\xdd\x49\x61\x79\xd6\x5d\xd7\xc2\x3e\x3a\x93\xd2\x96\xf7\x8b\x71\x79\xc9\xdc\xc0\x10\xe9\xa4\x50\xd4\x45\xb8\xb3\x33\x37\xfd\x6f\x00\x00\x00\xff\xff\x35\x24\x64\xc9\x2c\x02\x00\x00")

func templatesHtmlInc_signupHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_signupHtml,
		"templates/html/inc_signup.html",
	)
}

func templatesHtmlInc_signupHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_signupHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_signup.html", size: 556, mode: os.FileMode(420), modTime: time.Unix(1524274380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_feed_form.html": templatesHtmlInc_feed_formHtml,
	"templates/html/inc_feeds.html": templatesHtmlInc_feedsHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/inc_item.html": templatesHtmlInc_itemHtml,
	"templates/html/inc_items.html": templatesHtmlInc_itemsHtml,
	"templates/html/inc_pagination.html": templatesHtmlInc_paginationHtml,
	"templates/html/inc_search_results.html": templatesHtmlInc_search_resultsHtml,
	"templates/html/inc_signin.html": templatesHtmlInc_signinHtml,
	"templates/html/inc_signup.html": templatesHtmlInc_signupHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_feed_form.html": &bintree{templatesHtmlInc_feed_formHtml, map[string]*bintree{}},
			"inc_feeds.html": &bintree{templatesHtmlInc_feedsHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"inc_item.html": &bintree{templatesHtmlInc_itemHtml, map[string]*bintree{}},
			"inc_items.html": &bintree{templatesHtmlInc_itemsHtml, map[string]*bintree{}},
			"inc_pagination.html": &bintree{templatesHtmlInc_paginationHtml, map[string]*bintree{}},
			"inc_search_results.html": &bintree{templatesHtmlInc_search_resultsHtml, map[string]*bintree{}},
			"inc_signin.html": &bintree{templatesHtmlInc_signinHtml, map[string]*bintree{}},
			"inc_signup.html": &bintree{templatesHtmlInc_signupHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// templates/html/feeds.html
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/inc_items.html
// templates/html/inc_search_form.html
// templates/html/items.html
// templates/html/search_query.html
// templates/html/search_results.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlFeedsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x3d\xc5\x5f\xcc\x52\x9a\xbd\xc4\x59\x7a\x02\x2f\x50\x99\xd4\x0e\xc4\x0a\x3a\x2e\x24\xe4\xee\x32\x0d\xed\x2e\x81\xf7\xdf\xff\xbc\xb4\xa7\xe6\x01\xe0\x45\xa6\xd2\x0f\x80\x5b\x6d\x2a\xf9\x2a\x52\x3e\x4c\xf1\x74\x82\x76\x84\xef\xaf\xf2\xcb\x43\xc0\x5f\x8d\x94\x19\xde\xd3\xfa\x10\xa4\x7a\x42\x9a\x71\xbe\x60\xdc\x14\x70\x0f\x52\x6b\x36\x43\x9a\xc7\x5b\x57\xc2\x9d\x49\xeb\x11\x96\xb5\x1c\x24\xed\xd2\xad\x36\xda\x98\x62\xea\x3f\x00\x00\xff\xff\x66\xdf\xc8\xcf\xb2\x00\x00\x00")

func templatesHtmlFeedsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlFeedsHtml,
		"templates/html/feeds.html",
	)
}

func templatesHtmlFeedsHtml() (*asset, error) {
	bytes, err := templatesHtmlFeedsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/feeds.html", size: 178, mode: os.FileMode(420), modTime: time.Unix(1523121671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\x02\x04\x00\x00\xff\xff\xd2\x42\x65\xbd\x12\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 18, mode: os.FileMode(420), modTime: time.Unix(1523132297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\x52\x50\xb0\xc9\x48\x4d\x4c\x01\x31\x14\x14\x6c\x4a\x32\x4b\x72\x52\xed\xaa\xab\x15\xf4\x42\x40\x2c\x85\xda\x5a\x1b\x7d\x88\x18\x48\xa1\x3e\x4c\xa5\x4d\x52\x7e\x4a\xa5\x1d\x17\x20\x00\x00\xff\xff\x55\x07\xce\xbc\x43\x00\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 67, mode: os.FileMode(420), modTime: time.Unix(1523132287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_itemsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8c\xcd\x4a\xc5\x30\x14\x84\xf7\x7d\x8a\x21\x74\x59\x1a\xe8\x52\xd2\x6c\x14\xa4\xe0\xc2\x85\x3e\x40\xb4\x47\x73\x30\x8d\xa5\x89\xdd\x84\xf3\xee\xd2\x1f\x85\x7b\xef\xf2\x9b\xf9\x66\x00\xa0\x14\x2c\x2e\x7e\x12\x6a\x6e\x50\x73\xc6\x5d\x8f\x76\xc8\x34\x25\x88\x54\x9b\x61\x46\x5e\xf1\x1e\x5c\x4a\xbd\xe2\x4c\x93\xb2\x7b\x0c\x18\xdf\x59\xe3\xe0\x17\xfa\xe8\x55\x29\xdb\xba\x7d\xe2\xf8\x05\x11\x65\x4f\x7e\xe1\x1c\x08\x22\x46\x3b\x0b\x93\x26\x17\x82\xbd\x54\x8d\x3e\x52\xa3\x7d\xf7\xff\x3c\xff\x49\xf7\xdf\x31\x53\xcc\xbb\x37\xdf\xd6\x8f\xaf\xc3\x03\x44\x1a\x9c\xfc\xfc\xf3\x16\x38\x79\x1a\xaf\x06\x7a\xe4\xf5\x80\x52\x40\x71\xab\xab\xdf\x00\x00\x00\xff\xff\x2a\xcf\x9f\x6f\xfe\x00\x00\x00")

func templatesHtmlInc_itemsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_itemsHtml,
		"templates/html/inc_items.html",
	)
}

func templatesHtmlInc_itemsHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_itemsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_items.html", size: 254, mode: os.FileMode(420), modTime: time.Unix(1523130288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_search_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x4d\x0a\x83\x30\x14\x84\xf7\x3d\xc5\xf0\x2e\xe0\x05\x12\x77\x3d\x41\x4f\x10\x75\xda\x04\xcc\x8f\xcf\x17\xa8\xb7\x2f\x68\x71\x35\x03\x33\x7c\x7c\x0f\x00\x70\xef\xaa\x79\x3c\x2b\xe0\x52\x69\xdd\x60\x47\xa3\x17\xe3\xd7\x04\x25\x64\x7a\xd9\x04\x69\x39\xa3\xad\x61\x66\xac\xeb\x42\xf5\xf2\x2c\x46\xc5\xd6\xa9\x07\x76\xd3\x54\x3e\x88\x54\x0a\x86\x9b\x38\x75\xb3\x5a\xfe\xc8\xbd\x4f\x39\x99\x8c\x2f\x06\x9d\xa3\x1b\xae\xf1\xfe\x0e\x97\xcb\x2f\x00\x00\xff\xff\x98\x09\x6c\xbe\x98\x00\x00\x00")

func templatesHtmlInc_search_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_search_formHtml,
		"templates/html/inc_search_form.html",
	)
}

func templatesHtmlInc_search_formHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_search_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_search_form.html", size: 152, mode: os.FileMode(420), modTime: time.Unix(1523133789, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlItemsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\x41\x4b\x03\x31\x10\x85\xef\xfd\x15\x8f\xa5\xc7\xd2\x40\x8f\x32\x9b\x8b\x82\x14\x3c\x78\xd0\x1f\x90\x9a\xd1\x04\xb3\x69\x69\xc6\x82\x2c\xf3\xdf\x25\x9b\x46\xd0\xde\xf2\x32\xdf\x9b\xc7\x3c\x0a\x32\x25\xbb\x02\x28\xb0\xf3\xf5\x01\x90\x44\x49\x6c\xf7\xc2\x53\x21\xd3\x44\x25\x4c\x47\xe8\x70\xf4\xdf\x76\xb5\xc0\xf3\x8c\xb3\xcb\x1f\x8c\x75\xdc\x60\x1d\x05\x77\x23\xb6\x8b\x15\xaa\x6d\x9d\x8f\x17\xbc\x25\x57\xca\x38\x44\xe1\x69\x68\x29\x35\x72\x67\xc9\x21\x9c\xf9\x7d\x1c\xe6\xb9\xba\xb7\x4f\x31\x7f\x42\x75\xb0\x57\xfd\x52\xd3\xa1\x4a\xc6\x59\x50\x99\x5c\x4a\xf6\x2f\x4a\xa6\xfd\x92\x09\xbb\xdf\xcd\xa7\x0e\xdd\x1f\xb3\x70\x96\x85\x3b\xdd\x8e\x1f\x5f\xf7\x0f\x50\xdd\xe0\xaa\x9f\xbf\x0e\x29\x96\xc0\xfe\x9f\xc1\xf8\x78\xb1\xfd\x5e\xce\xbe\xdf\xb6\xd4\xd2\xda\x20\xd3\xaa\xfc\x09\x00\x00\xff\xff\x89\x4a\x36\x3a\x52\x01\x00\x00")

func templatesHtmlItemsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlItemsHtml,
		"templates/html/items.html",
	)
}

func templatesHtmlItemsHtml() (*asset, error) {
	bytes, err := templatesHtmlItemsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/items.html", size: 338, mode: os.FileMode(420), modTime: time.Unix(1523132270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSearch_queryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\x52\x50\xb0\xc9\x48\x4d\x4c\x01\x31\x14\x14\x6c\x4a\x32\x4b\x72\x52\xed\x82\x53\x13\x8b\x92\x33\x6c\xf4\x21\x3c\x90\x12\x7d\x98\x1a\x9b\xa4\xfc\x94\x4a\x3b\x2e\xb0\xea\xea\x6a\x85\x92\xd4\xdc\x82\x9c\xc4\x92\x54\x05\xa5\xcc\xbc\xe4\xf8\x62\xb0\xbe\xf8\xb4\xfc\xa2\x5c\x3d\x90\xe9\x4a\x0a\xb5\xb5\x60\x95\x60\x23\x20\x3a\x6d\xf4\x21\xf6\x02\x02\x00\x00\xff\xff\x8c\xe0\xb7\x4f\x7f\x00\x00\x00")

func templatesHtmlSearch_queryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSearch_queryHtml,
		"templates/html/search_query.html",
	)
}

func templatesHtmlSearch_queryHtml() (*asset, error) {
	bytes, err := templatesHtmlSearch_queryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/search_query.html", size: 127, mode: os.FileMode(420), modTime: time.Unix(1523133842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSearch_resultsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xcd\x6a\x2b\x31\x0c\x85\xf7\x79\x0a\x31\x64\x19\xc6\x24\xcb\x8b\xa2\xcd\x2d\x94\x40\x17\x2d\x6d\xd7\xc1\x89\x95\xda\xd4\xf6\x24\xb6\x13\x08\xc6\xef\x5e\x3c\xce\xf4\x77\xe7\x63\x7d\xe7\x08\x49\xa8\x93\xb3\x34\x03\x40\xcd\x52\xd5\x07\x00\x26\x93\x2c\xd3\x33\xcb\xb0\xd7\x28\x9a\xaa\x88\x98\x18\xdc\x0d\xea\x4a\xb3\x91\xce\x19\x12\xbb\xa3\x95\x89\xa1\x33\x7e\xbf\x8d\xa3\x6f\x7b\x18\x82\xeb\x6b\x7a\x07\xa5\x8c\x64\x0b\xd7\x4b\x7a\x3a\x73\xb8\x42\xe0\x78\xb6\x29\xc2\x61\x08\x80\x27\xca\x19\xfa\x56\x28\x05\xc5\x89\x50\xe8\x25\x7d\xf9\x72\x86\x20\xfd\x1b\xc3\xdc\x2c\x60\x6e\x12\xfc\x5b\x43\xbf\x49\xec\xe2\x14\x8f\xca\x5c\x60\x6f\x65\x8c\xeb\xce\x24\x76\x5d\x73\xd7\x96\x2b\x42\x09\x3a\xf0\x61\xdd\xe5\x5c\xdd\xfd\x83\xf1\xef\x50\x4a\x47\x37\xfd\x52\x87\x1c\x3b\x4b\x02\x8c\x4e\x5a\x4b\x3f\x51\x14\xed\x17\x85\x5e\x7d\x26\x1f\x27\xe8\xff\xe0\x13\xfb\x34\x72\xc7\xbf\xe5\xfb\xd7\xcd\x1d\x94\xb2\x80\x9b\x7e\x3c\xef\xac\x89\x9a\xd5\x2f\x83\x50\xe6\x42\xd3\xbc\xec\xd5\xb7\xd5\xa1\x68\x4b\x47\xd1\x4e\xf6\x11\x00\x00\xff\xff\xeb\xec\xcd\x8a\xba\x01\x00\x00")

func templatesHtmlSearch_resultsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSearch_resultsHtml,
		"templates/html/search_results.html",
	)
}

func templatesHtmlSearch_resultsHtml() (*asset, error) {
	bytes, err := templatesHtmlSearch_resultsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/search_results.html", size: 442, mode: os.FileMode(420), modTime: time.Unix(1523133846, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/feeds.html": templatesHtmlFeedsHtml,
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/inc_items.html": templatesHtmlInc_itemsHtml,
	"templates/html/inc_search_form.html": templatesHtmlInc_search_formHtml,
	"templates/html/items.html": templatesHtmlItemsHtml,
	"templates/html/search_query.html": templatesHtmlSearch_queryHtml,
	"templates/html/search_results.html": templatesHtmlSearch_resultsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"feeds.html": &bintree{templatesHtmlFeedsHtml, map[string]*bintree{}},
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"inc_items.html": &bintree{templatesHtmlInc_itemsHtml, map[string]*bintree{}},
			"inc_search_form.html": &bintree{templatesHtmlInc_search_formHtml, map[string]*bintree{}},
			"items.html": &bintree{templatesHtmlItemsHtml, map[string]*bintree{}},
			"search_query.html": &bintree{templatesHtmlSearch_queryHtml, map[string]*bintree{}},
			"search_results.html": &bintree{templatesHtmlSearch_resultsHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

